name: build_and_push_dev

on:
  release:
    types: [published]
  push:
    branches:
      - dev

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Create .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_AUTH_V2 }}" >> $HOME/.npmrc
          echo "@taehoya:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
          echo "npmrc_path=$HOME/.npmrc" >> "$GITHUB_ENV"

      - name: inject env
        run: |
          echo "ENV=dev" > .env
          echo "NEXT_PUBLIC_KAKAO_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_CLIENT_KEY }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_REST_API_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_REST_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_DEV_SERVER_URL=${{ secrets.NEXT_PUBLIC_DEV_SERVER_URL }}" >> .env
          echo "NEXT_PUBLIC_SEARCH_IMAGE_SERVER_URL=${{ secrets.NEXT_PUBLIC_SEARCH_IMAGE_SERVER_URL }}" >> .env
          echo "NEXT_PUBLIC_NAVER_CLIENT_ID=${{ secrets.NEXT_PUBLIC_NAVER_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_NAVER_CLIENT_SECRET=${{ secrets.NEXT_PUBLIC_NAVER_CLIENT_SECRET }}" >> .env
          echo "NEXT_PUBLIC_ACCESS_TOKEN=${{ secrets.NEXT_PUBLIC_ACCESS_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_REFRESH_TOKEN=${{ secrets.NEXT_PUBLIC_REFRESH_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
          echo "NEXT_PUBLIC_SENTRY_AUTH_KEY=${{ secrets.NEXT_PUBLIC_SENTRY_AUTH_KEY }}" >> .env
          echo "NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_TOKEN=${{ secrets.NEXT_PUBLIC_TELEGRAM_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_CHAT_ID=${{ secrets.NEXT_PUBLIC_TELEGRAM_CHAT_ID }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_LOGIN_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_LOGIN_REDIRECT_URI }}" >> .env
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          REPOSITORY: taste-client
          IMAGE_TAG: latest
          GITHUB_REF_NAME: ${{ github.ref_name }} # Assuming GITHUB_REF_NAME is provided in the environment
          NPMRC_PATH: ${{ env.npmrc_path }}
        run: |
          docker buildx build \
            --file ./Dockerfile \
            --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            --tag $REGISTRY/$REPOSITORY:$GITHUB_REF_NAME \
            --cache-from "type=registry,ref=$REGISTRY/$REPOSITORY:$IMAGE_TAG" \
            --secret id=npmrc,src=$NPMRC_PATH \
            --cache-to type=inline \
            --push \
            .
  deploy:
    runs-on: self-hosted
    if: always()
    needs: [build_and_push]
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: SSH and run docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ./init.sh
